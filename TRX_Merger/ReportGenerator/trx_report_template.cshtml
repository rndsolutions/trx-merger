@using System
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Run.Name</title>

    <link href="https://maxcdn.bootstrapcdn.com/bootswatch/3.3.4/cerulean/bootstrap.min.css" rel="stylesheet">
    <style>
        .modal-dialog {
            width: 90%;
            height: 90%;
            padding: 0;
        }

        .modal-content {
            height: 100%;
            border-radius: 0;
        }

        .ex {
            white-space: pre;
        }

        .nowrap {
            white-space: nowrap;
        }

        .borderless tbody tr td, .borderless tbody tr th, .borderless thead tr th {
            border: none;
            padding: 2px;
        }

        .chart-legend li span {
            display: inline-block;
            width: 12px;
            height: 12px;
            margin-right: 5px;
        }

        .chart-legend ul {
            list-style-type: none;
            font-weight: bold;
        }

        .doughnut-legend {
            padding: 0px;
        }
    </style>
    @{
      var resultBasedColor = "";
      var resultBasedPanel= "";
      var resultBasedDisplay= "";

      if(@Model.Run.ResultSummary.Outcome.Equals("Completed", StringComparison.CurrentCultureIgnoreCase)){
        resultBasedColor = "#73a839";
        resultBasedPanel = "panel panel-success";
        resultBasedDisplay = "none";
      }
      else{
        resultBasedColor = "red";
        resultBasedPanel = "panel panel-danger";
        resultBasedDisplay = "block";
      }
    }
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
</head>
<body>
    <div class="navbar navbar-default">
        <div class="container">
            <div class="navbar-header">
            </div>
            <div class="navbar-collapse collapse" id="navbar-main">
                <div class="row-vertical">
                    <div class="text-center" style="font-size:30px;color: white;">@Model.Run.Name</div>
                </div>
            </div>
        </div>
    </div>

    <div class="container" style="margin-top: 60px">
        <!-- Summary -->
        <div class="@resultBasedPanel">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-lg-10">
                        <h3 class="panel-title">Test Run Summary</h3>
                    </div>
                    <div class="col-lg-2">
                        <h3 class="panel-title">@Model.Run.ResultSummary.Outcome</h3>
                    </div>
                </div>
            </div>


            <div id="runSummary" class="panel-body">
                <div class="col-md-4">
                    <div class="form-group" style="margin-bottom:0px">
                        <h4 style="margin:4px">User</h4>
                        <label class="form-control" style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger">@Model.Run.RunUser</label>
                    </div>

                    <div class="form-group" style="margin-bottom:0px">
                        <h4 style="margin:4px">Started At</h4>
                        <label class="form-control" style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger">@DateTime.Parse(Model.Run.Times.Start)</label>
                    </div>

                    <div class="form-group" style="margin-bottom:0px">
                        <h4 style="margin:4px">Finished At</h4>
                        <label class="form-control" style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger">@DateTime.Parse(Model.Run.Times.Finish)</label>
                    </div>

                    <div class="form-group" style="margin-bottom:0px">
                        <h4 style="margin:4px">Duration</h4>
                        <label class="form-control" style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger">@Model.Run.Duration</label>
                    </div>

                    <div class="form-group" style="margin-bottom:0px">
                        <h4 style="margin:4px">Test Run Outcome</h4>
                        <label class="form-control" style="border: 0px; margin-bottom:0px; font-weight:bold;color:@resultBasedColor; font-size: larger">@Model.Run.ResultSummary.Outcome</label>
                    </div>
                </div>

                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="row" style="text-align: center">
                                <h3>Passed</h3>
                            </div>
                            <div class="row" style="text-align: center">
                                <canvas id="passed-chart" width="150" height="150"></canvas>
                                <h3 style="margin-top: -93px">@Model.Run.ResultSummary.Counters.Passed</h3>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="row" style="text-align: center">
                                <h3>Failed</h3>
                            </div>
                            <div class="row" style="text-align: center">
                                <canvas id="failed-chart" width="150" height="150"></canvas>
                                <h3 style="margin-top: -93px">@Model.Run.ResultSummary.Counters.Failed</h3>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="row" style="text-align: center">
                                <h3>Timeout</h3>
                            </div>
                            <div class="row" style="text-align: center">
                                <canvas id="timeout-chart" width="150" height="150"></canvas>
                                <h3 style="margin-top: -93px">@Model.Run.ResultSummary.Counters.Timeout</h3>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="row" style="text-align: center">
                                <h3>Aborted</h3>
                            </div>
                            <div class="row" style="text-align: center">
                                <canvas id="aborted-chart" width="150" height="150"></canvas>
                                <h3 style="margin-top: -93px">@Model.Run.ResultSummary.Counters.Aborted</h3>
                            </div>
                        </div>
                    </div>
                    <div class="row" style="text-align:center; margin-top: 100px">
                        <h1>Total Tests: <b>@Model.Run.ResultSummary.Counters.Total</b></h1>
                    </div>
                </div>
            </div>
        </div>
        <!--  End of Summary -->
        <!--      All Failed Tests    -->
        <div class="panel panel-danger" style="display: @resultBasedDisplay">
            <div class="panel-heading" style="border-radius:0px">
                <div class="row">
                    <div class="col-lg-11">
                        <h3 class="panel-title">All Failed Tests</h3>
                    </div>
                    <div class="col-lg-1" style="text-align: center;cursor: pointer" onclick="collapseExpandAllFailingClick(AllFailing)">
                        <b id="expandCollapseAllFailing" style="font-size: larger">+</b>
                    </div>
                </div>
            </div>

            <div id="AllFailing" style="display:none">
                <table class="table table-striped table-hover ">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Start Time</th>
                            <th>Duration</th>
                            <th>Outcome</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* Needs to use UnitTestResultReport *@
                        @foreach (var test in Model.AllFailedTests)
                        {
                        <tr class="danger">
                            <td id="@String.Format("err{0}",test.TestId)" style="display:none">@test.AsJson()</td>
                            <td>@test.Result.TestName</td>
                            <td>@DateTime.Parse(test.Result.StartTime).ToString("MM.dd.yyyy hh\\:mm\\:ss")</td>
                            <td>@TimeSpan.Parse(test.Result.Duration).TotalSeconds.ToString("n2") sec.</td>
                            <td>FAILED</td>
                            <td><a style="cursor: pointer" onclick="showTestDetails(document.getElementById('@String.Format("err{0}",test.TestId)'))">Details</a></td>

                        </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <!--  End of All Failed Tests -->
        <!-- Report by TestClass -->
        @foreach (var testClassEntry in Model.TestClassReports)
        {
        <div class="panel panel-primary">
            <div class="panel-heading" style="border-radius: 0px">
                <div class="row">
                    <div class="col-lg-11">
                        <h3 class="panel-title">@testClassEntry.Value.FriendlyTestClassName</h3>
                    </div>
                    <div class="col-lg-1" style="text-align: center;cursor: pointer" onclick="collapseExpandAllFailingClick(@testClassEntry.Value.FriendlyTestClassName)">
                        <b id="@String.Format("expandCollapse{0}", testClassEntry.Value.FriendlyTestClassName)" style="font-size: larger">+</b>
                    </div>
                </div>
            </div>

            <div>
                <div style="margin-top: 20px; min-height:250px">
                    <div class="col-lg-7">
                        <h4 style="margin:4px">Total Tests</h4>
                        <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger; margin-left: 10px">@testClassEntry.Value.Tests.Count</label><br />
                        <h4 style="margin:4px">Duration</h4>
                        <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger; margin-left: 10px">@testClassEntry.Value.Duration</label><br />
                        <h4 style="margin:4px">Class Name</h4>
                        <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger; margin-left: 10px">@testClassEntry.Value.TestClassName</label><br />
                        <h4 style="margin:4px">TestClass Dll</h4>
                        <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger; margin-left: 10px; word-break: break-all">@testClassEntry.Value.Dll</label>


                    </div>
                    <div class="col-lg-3" style="text-align: right">
                        <canvas id="@String.Format("chart{0}", testClassEntry.Value.FriendlyTestClassName)" width="210" height="210"></canvas>
                    </div>
                    <div class="col-lg-2" style="padding: 0px">
                        <div id="@String.Format("legend{0}", testClassEntry.Value.FriendlyTestClassName)" class="chart-legend"></div>
                    </div>
                </div>

                <div id="@testClassEntry.Value.FriendlyTestClassName" style="display: none">
                    <table class="table table-striped table-hover ">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Start Time</th>
                                <th>Duration</th>
                                <th>Outcome</th>
                                <th>Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var test in testClassEntry.Value.Tests)
                            {
                            string rowClass = test.Result.Outcome == "Passed" ? "success" : "danger";

                            <tr class="@rowClass">
                                <td id="@test.TestId" style="display:none">@test.AsJson()</td>
                                <td>@test.Result.TestName</td>
                                <td>@DateTime.Parse(test.Result.StartTime).ToString("MM.dd.yyyy hh\\:mm\\:ss")</td>
                                <td>@TimeSpan.Parse(test.Result.Duration).TotalSeconds.ToString("n2") sec.</td>
                                <td>@test.Result.Outcome</td>
                                <td><a style="cursor: pointer" onclick="showTestDetails(@test.TestId)">Details</a></td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        }

        <!--  End of Report by TestClass -->
        <!-- Details Modal -->
        <div id="testDetails" class="modal">
            <div class="modal-dialog">
                <div id="detailsContent" class="modal-content panel-danger">
                    <div class="modal-header panel-heading" style="border-top-left-radius:0px; border-top-right-radius:0px">
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                        <h4 class="modal-title" style="color:white" id="detailsHeader"></h4>
                    </div>
                    <div class="modal-body">
                        <!-- Test Details -->
                        <div>
                            <div class="col-lg-4">
                                <div class="col-lg-4">
                                    <h4 style="margin:4px">Started At:</h4>
                                    <h4 style="margin:4px">Finished At:</h4>
                                    <h4 style="margin:4px">Duration:</h4>
                                </div>
                                <div class="col-lg-8">
                                    <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger" id="detailsStart"></label><br />
                                    <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger" id="detailsEnd"></label><br />
                                    <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger" id="detailsDuration"></label>
                                </div>
                            </div>
                            <div class="col-lg-8">
                                <div class="col-lg-2">
                                    <h4 style="margin:4px">Computer Name</h4>
                                    <h4 style="margin:4px">Class Name</h4>
                                    <h4 style="margin:4px">TestClass Dll</h4>
                                </div>
                                <div class="col-lg-10">
                                    <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger" id="detailsComp"></label><br />
                                    <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger" id="detailsClass"></label><br />
                                    <label style="border: 0px; margin-bottom:0px; font-weight:bold; font-size: larger; word-break: break-all" id="detailsDll"></label>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-12"
                             id="detailsSeparator"
                             style="height:2px; margin-top:10px">
                        </div>

                        <div>
                            <div id="detailsParent" style="overflow: scroll" class="col-lg-12">
                                <!--STD OUT -->
                                <div>
                                    <h4>Standard Output</h4>
                                    <div>
                                        <table class="table table-striped table-hover text-nowrap borderless">
                                            <thead>
                                                <tr style="display:none">
                                                    <th>#</th>
                                                </tr>
                                            </thead>
                                            <tbody id="detailsStdOut"></tbody>
                                        </table>
                                    </div>
                                </div>

                                <!--STD ERR -->
                                <div id="rootStdErr">
                                    <h4>Standard Error</h4>
                                    <div>
                                        <table class="table table-striped table-hover text-nowrap borderless">
                                            <thead>
                                                <tr style="display:none">
                                                    <th>#</th>
                                                </tr>
                                            </thead>
                                            <tbody id="detailsStdErr"></tbody>
                                        </table>
                                    </div>
                                </div>
                                <!--Error info -->
                                <div id="errorDetails">
                                    <h4>Error Details</h4>
                                    <!--  Message  -->
                                    <div id="detailsErrorMessage">
                                        <h5>Error Message</h5>
                                        <table class="table table-striped table-hover text-nowrap borderless">
                                            <thead>
                                                <tr style="display:none">
                                                    <th>#</th>
                                                </tr>
                                            </thead>
                                            <tbody id="detailsErrorMessageTable"></tbody>
                                        </table>
                                    </div>
                                    <!--  StackTrace  -->
                                    <div id="detailsStackTrace">
                                        <h5>Stack Trace</h5>
                                        <table class="table table-striped table-hover text-nowrap borderless">
                                            <thead>
                                                <tr style="display:none">
                                                    <th>#</th>
                                                </tr>
                                            </thead>
                                            <tbody id="detailsStackTraceTable"></tbody>
                                        </table>
                                    </div>
                                </div>
                                <!--Image -->
                                <div id="errorImage">
                                    <h4>Error Image</h4>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        window.onresize = function(event) {
            document.getElementById("detailsParent").style.height = ($("#detailsContent").height() - 190) + "px";
        };

        function decodeEntities(encodedString) {
            var textArea = document.createElement('textarea');
            textArea.innerHTML = encodedString;
            return textArea.value;
        }

        function showTestDetails(detailsCell)
        {
            //
            var obj = JSON.parse(detailsCell.innerHTML);
            if(obj.Result.Outcome == "Passed"){
                document.getElementById("detailsContent").className = "modal-content panel-success";
                document.getElementById("detailsSeparator").style.background = "green"
            } else {
                document.getElementById("detailsContent").className = "modal-content panel-danger";
                document.getElementById("detailsSeparator").style.background = "red"
            }

            document.getElementById("detailsHeader").innerHTML = obj.Result.TestName + " : " +  obj.Result.Outcome;
            document.getElementById("detailsStart").innerHTML = obj.FormattedStartTime;
            document.getElementById("detailsEnd").innerHTML = obj.FormattedEndTime;
            document.getElementById("detailsDuration").innerHTML = obj.FormattedDuration;
            document.getElementById("detailsClass").innerHTML = obj.ClassName;
            document.getElementById("detailsDll").innerHTML = obj.Dll;
            document.getElementById("detailsComp").innerHTML = obj.Result.ComputerName;

            //Error Info
            document.getElementById("detailsErrorMessageTable").innerHTML = "";
            document.getElementById("detailsStackTraceTable").innerHTML = "";
            if(obj.Result.Output.ErrorInfo != undefined){
                document.getElementById("errorDetails").style.display = "";

                if(obj.ErrorMessageRows != null){
                    document.getElementById("detailsErrorMessage").style.display = "";

                    var numberOfListItems = obj.ErrorMessageRows.length;

                    for (var i = 0; i < numberOfListItems; i++) {

                        var row = document.createElement("tr");
                        var cell = document.createElement("td");

                        if(obj.ErrorMessageRows[i].includes("http")){
                            cell.innerHTML = decodeEntities(obj.ErrorMessageRows[i]);
                        }
                        else{
                            cell.innerHTML = obj.ErrorMessageRows[i].replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
                        }
                        row.appendChild(cell);
                        document.getElementById("detailsErrorMessageTable").appendChild(row)
                    }
                } else {
                    document.getElementById("detailsErrorMessage").style.display = "none";
                }

                if(obj.ErrorStackTraceRows != null){
                    document.getElementById("detailsStackTrace").style.display = "";

                    var numberOfListItems = obj.ErrorStackTraceRows.length;

                    for (var i = 0; i < numberOfListItems; i++) {

                        var row = document.createElement("tr");
                        var cell = document.createElement("td");
                        cell.innerHTML = obj.ErrorStackTraceRows[i];
                        row.appendChild(cell);
                        document.getElementById("detailsStackTraceTable").appendChild(row)
                    }
                } else {
                    document.getElementById("detailsStackTrace").style.display = "none";
                }
            } else {
                document.getElementById("errorDetails").style.display = "none";
            }

            //Error Image
            if(obj.ErrorImage != undefined){
                document.getElementById("errorImage").style.display = "";
            } else {
                document.getElementById("errorImage").style.display = "none";
            }


            //Standard Output
            var detailsStdOutContent = "";
            document.getElementById("detailsStdOut").innerHTML = "";
            if(obj.StdOutRows == null && obj.CucumberStdOut != null)
            {
                var numberOfListItems = obj.CucumberStdOut.length;
                for (var i = 0; i < numberOfListItems; i++) {
                    var itemData = obj.CucumberStdOut[i];

                    var row = document.createElement("tr");
                    row.className = itemData.Value;

                    var cell = document.createElement("td");
                    var innerHTML;
                    if(itemData.Key.includes("http")){
                        innerHTML = decodeEntities(itemData.Key);
                    }
                    else{
                        innerHTML = itemData.Key.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
                    }

                    if(i % 2 != 0) {
                        cell.innerHTML = innerHTML;
                        row.appendChild(cell);
                    } else {
                        var b = document.createElement("b");
                        b.innerHTML = innerHTML;
                        cell.appendChild(b);
                        row.appendChild(cell);
                    }

                    document.getElementById("detailsStdOut").appendChild(row)
                }
            }

            if(obj.StdOutRows != null) {

            }


            //Standard Error
            var detailsStdErrContent = "";
            document.getElementById("detailsStdErr").innerHTML = "";
            if(obj.StdErrRows != null)
            {
                var numberOfListItems = obj.StdErrRows.length;
                for (var i = 0; i < numberOfListItems; i++) {
                    var itemData = obj.StdErrRows[i];

                    var row = document.createElement("tr");
                    row.className = itemData;

                    var cell = document.createElement("td");
                    var innerHTML;
                    if(itemData.includes("http")){
                        innerHTML = decodeEntities(itemData);
                    }
                    else{
                        innerHTML = itemData.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
                    }

                    if(i % 2 != 0) {
                        cell.innerHTML = innerHTML;
                        row.appendChild(cell);
                    } else {
                        var b = document.createElement("b");
                        b.innerHTML = innerHTML;
                        cell.appendChild(b);
                        row.appendChild(cell);
                    }

                    document.getElementById("detailsStdErr").appendChild(row);
                }
            }
            else{
                document.getElementById("rootStdErr").style.display = "none";
            }


            setTimeout(function(){
                document.getElementById("detailsParent").style.height = ($("#detailsContent").height() - 190) + "px";
            }, 100);

            $('#testDetails').modal('show');
        }

        function collapseExpandAllFailingClick(item) {
            var text = document.getElementById("expandCollapse" + item.id).innerHTML;
            if (text == "-") {
                document.getElementById("expandCollapse" + item.id).innerHTML = "+";
                item.style.display = "none";
            }
            else {
                document.getElementById("expandCollapse" + item.id).innerHTML = "-";
                item.style.display = "";
            }
        }

        var failed = [
            {
                value: @Model.Run.ResultSummary.Counters.Failed,
                color: "#FF7373",
                highlight: "#FF7373",
            },
            {
                value:  @(Model.Run.ResultSummary.Counters.Total - Model.Run.ResultSummary.Counters.Failed),
                color: "#AAAAAA",
                highlight: "#AAAAAA",
            },
        ];

        var passed = [
            {
                value: @Model.Run.ResultSummary.Counters.Passed,
                color: "#A3E0AB",
                highlight: "#A3E0AB",
                label: "Green"
            },
            {
                value: @(Model.Run.ResultSummary.Counters.Total - Model.Run.ResultSummary.Counters.Passed),
                color: "#AAAAAA",
                highlight: "#AAAAAA",
                label: ""
            }
        ];

        var timeout = [
            {
                value: @Model.Run.ResultSummary.Counters.Timeout,
                color: "#FFFF8E",
                highlight: "#FFFF8E",
                label: "Green"
            },
            {
                value: @(Model.Run.ResultSummary.Counters.Total - Model.Run.ResultSummary.Counters.Timeout),
                color: "#AAAAAA",
                highlight: "#AAAAAA",
                label: ""
            }
        ];

        var aborted = [
            {
                value: @Model.Run.ResultSummary.Counters.Aborted,
                color: "#FBD0AD",
                highlight: "#FBD0AD",
                label: "Green"
            },
            {
                value: @(Model.Run.ResultSummary.Counters.Total - Model.Run.ResultSummary.Counters.Aborted),
                color: "#AAAAAA",
                highlight: "#AAAAAA",
                label: ""
            }
        ];

        window.onload = function () {
            var passedChart = document.getElementById("passed-chart").getContext("2d");
            var failedChart = document.getElementById("failed-chart").getContext("2d");
            var timeoutChart = document.getElementById("timeout-chart").getContext("2d");
            var abortedChart = document.getElementById("aborted-chart").getContext("2d");

            window.failed = new Chart(failedChart).Doughnut(failed,
                {
                    showTooltips: false,
                });
            window.passed = new Chart(passedChart).Doughnut(passed,
                {
                    showTooltips: false,
                });
            window.timeout = new Chart(timeoutChart).Doughnut(timeout,
                {
                    showTooltips: false,
                });
            window.aborted = new Chart(abortedChart).Doughnut(aborted,
                {
                    showTooltips: false,
                });

            var chartsData = JSON.parse("@Model.TestClassReportsJson()".replace(/&quot;/g,'"'));
            for (var i = 0; i < chartsData.length; i++) {

                var data = [
                    {
                        value:  chartsData[i].Failed,
                        color: "#FF7373",
                        highlight: "#FF7373",
                        label: "Failed"
                    },
                    {
                        value:  chartsData[i].Passed,
                        color: "#A3E0AB",
                        highlight: "#A3E0AB",
                        label: "Passed"
                    },
                    {
                        value: chartsData[i].Timeout,
                        color: "#FFFF8E",
                        highlight: "#FFFF8E",
                        label: "Timeout"
                    },
                    {
                        value: chartsData[i].Aborted,
                        color: "#FBD0AD",
                        highlight: "#FBD0AD",
                        label: "Aborted"
                    },
                ];
                var chart = document.getElementById("chart" + chartsData[i].ClassName).getContext("2d");
                var chartElem = new Chart(chart).Doughnut(data,
                   {
                       tooltipTemplate: "<%= value %>",
                       legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%>(<%=segments[i].value%>)<%=segments[i].label%><%}%></li><%}%></ul>"

                   });
                document.getElementById("legend" + chartsData[i].ClassName).innerHTML = chartElem.generateLegend();

            }
        };
    </script>
</body>
</html>